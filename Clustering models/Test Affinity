# **Pre-Processing**

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, OneHotEncoder

# Configure pandas to display all columns
pd.set_option("display.max_columns", None)

df_cluster = pd.read_csv('bank_marketing_dataset.csv')

numerical_cols_c = df_cluster.select_dtypes(include=['int64', 'float64']).columns
categorical_cols = df_cluster.select_dtypes(include=['object']).columns
duration_col = ['duration']  # Column to log transform

df_cluster = df_cluster.drop(columns=['nr.employed', 'emp.var.rate'])

numerical_cols_c = df_cluster.select_dtypes(include=['int64', 'float64']).columns

X_preprocessed_df = df_cluster.copy()
X_preprocessed_df['duration'] = np.log1p(df_cluster['duration'])

scaler = StandardScaler()
X_preprocessed_df[numerical_cols_c] = scaler.fit_transform(X_preprocessed_df[numerical_cols_c])

encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
X_cat_encoded = pd.DataFrame(encoder.fit_transform(X_preprocessed_df[categorical_cols]),
                                   columns=encoder.get_feature_names_out(categorical_cols),
                                   index=X_preprocessed_df.index)

X_no_encoded = X_preprocessed_df.copy()

X_preprocessed_df.drop(columns=categorical_cols, inplace=True)

X_preprocessed_df = pd.concat([X_preprocessed_df, X_cat_encoded], axis=1)

print(X_preprocessed_df.shape)

X_preprocessed_df.head()

prefixes = ['job_', 'marital_', 'education_', 'default_', 'housing_', 'loan_', 'contact_', 'month_', 'day_of_week_', 'poutcome_', 'subscribed_']
one_hot_cols = [col for col in X_preprocessed_df.columns if any(col.startswith(prefix) for prefix in prefixes)]

continuous_data = X_preprocessed_df.drop(columns=one_hot_cols, axis=1)

# **Affinity Propagation**

from sklearn.cluster import AffinityPropagation
from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score

# Create an instance of AffinityPropagation
affinity_propagation = AffinityPropagation(damping=0.5, preference=None, max_iter=200, convergence_iter=15, copy=True, affinity='euclidean', verbose=False)



# Fit the model to your preprocessed data
affinity_propagation.fit(X_preprocessed_df)

# Predict cluster labels for the data
pred_labels = affinity_propagation.labels_

# Evaluate the clustering performance using silhouette score
silhouette = silhouette_score(X_preprocessed_df, pred_labels)
print("Silhouette Score:", silhouette)

# Evaluate the clustering performance using Calinski Harabasz score
calinski_harabasz = calinski_harabasz_score(X_preprocessed_df, pred_labels)
print("Calinski Harabasz Score:", calinski_harabasz)

# Evaluate the clustering performance using Davies Bouldin score
davies_bouldin = davies_bouldin_score(X_preprocessed_df, pred_labels)
print("Davies Bouldin Score:", davies_bouldin)

# Visualize the clusters if the data is 2D (using PCA)
if X_preprocessed_df.shape[1] == 2:
    plt.scatter(X_preprocessed_df.iloc[:, 0], X_preprocessed_df.iloc[:, 1], c=pred_labels, cmap='viridis')
    plt.title('Affinity Propagation Clustering Results')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.colorbar(label='Cluster')
    plt.show()
